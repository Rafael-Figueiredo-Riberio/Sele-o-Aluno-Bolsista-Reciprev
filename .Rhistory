install.packages("tidyverse")
library(tidyverse)
ggplot2::mpg
ggplot(data = mgp) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, type = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 11)
ggplot2::mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
library(tidyverse)
gplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
ggpolt(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class))
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
getwd()
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
y = lag(x, -1)
ccf(y, x, ylab='CCovF', type='covariance')
s = c(rep(0,100), 10*exp(-(1:100)/20)*cos(2*pi*1:100/4))
x = s + rnorm(200)
plot.ts(x)
s2 = c(rep(0,100), 10*exp(-(1:100)/200)*cos(2*pi*1:100/4))
x2 = s + rnorm(200)
plot.ts(x2)
y = lag(x, -1)
ccf(y, x, ylab='CCovF', type='covariance')
y2 = lag(x, -1)
ccf(y2, x, ylab='CCovF', type='covariance')
y2 = lag(x2, -1)
ccf(y2, x2, ylab='CCovF', type='covariance')
y = lag(x, -10)
ccf(y, x, ylab='CCovF', type='covariance')
y = lag(x, -1)
ccf(y, x, ylab='CCovF', type='covariance')
-1<1
-0.5<1
-11<-10
(-11)<(-10)
#Questão 1
Mydata = read.table("Desemprego por estado Alemanha.txt", header = TRUE)
Mydata
#Só podemos fazer a  análise na variável uneployment_rate  visto que a variável
#Federal_statel é descritiva, apenas serve para diferenciar as observações.
#Média, Variancia, Curtose, Assimetria
install.packages("tidyverse")
install.packages("ggplot2")
require(tidyverse)
require(ggplot2)
Média = mean(Mydata$Unemployment_rate)
Mediana = median(Mydata$Unemployment_rate)
Amplitude = range(Mydata$Unemployment_rate)
Q1 <- quantile(Mydata$Unemployment_rate, probs = 0.25)
Q2 <- quantile(Mydata$Unemployment_rate, probs = 0.50)
Q3 <- quantile(Mydata$Unemployment_rate, probs = 0.75)
var(Mydata$Unemployment_rate)
varPop <- function(x){
n <- length(x)
var(x)*(n-1)/n
}
varpop = varPop(Mydata$Unemployment_rate)
sigma = sd(Mydata$Unemployment_rate)
#Boxplot
boxplot(Mydata$Unemployment_rate)
Mydata = read.table("Desemprego por estado Alemanha.txt", header = TRUE)
getwd()
setwd("C:/Users/rafael/Desktop/Rafael/R/Diretório/Seleção Aluno Bolsista")
Mydata <- read.csv2("Johnson_&_johnson.csv")
head(Mydata)
# Rotina para gerar gráficos de uma série temporal.
# A serie temporal usada nesse programa mostra o lucro trimestral por ação
# da empresa Johnson & Johnson, o período de observação inclui o primeiro
# trimeste do ano 1960 até o quarto trimeste do ano 1980, assim temos 84
# observações.
# A série em questão foi tirada do livro "Robert H.Shumway; David S.Stoffer.
# Time Series Analysis and Its Applications. Fourth Edition" e convertida para
# um arquivo CSV.
# Carregando o Arquivo
Mydata <- read.csv2("Johnson_&_johnson.csv")
# Print das 6 primeiras linhas
head(Mydata)
# Ajustes no Data Frame
# O Data Frame Mydata tem 21 linhas e 5 colunas (21x5)
# Para conseguirmos plotar o lucro da ação ao longo do tempo temos que transfor-
# mar esse Data Frame para que ele fique no formato (84x2)
# assim ficaremos com duas colunas uma para os anos e a outra para o lucro da
# ação, que mais tarde serão os eixos do nosso gráfico.
# Um ano tem 4 trimestres
# O primeiro trimestre será representado por 0.25
# O segundo trimestre será representado por 0.50
# O terceiro trimestre será representado por 0.75
# O quarto trimestre será representado por 1.00
# A ideia aqui é conseguir reconhercer o ano e o trimestre através de números
# 1960.25 representa o primeiro trimeste de 1960
# 1965.50 representa o segundo trimeste de 1965
# 1970.75 representa o terceiro trimeste de 1970
# 1975.00 representa o quarto trimeste de 1974
# Primeiramente irei "quebrar" o Mydata em 4 Data Frames
# Mydata_0.25 que irá conter todos os valores referentes ao primeiro Trimestre
# dos anos analisados
Mydata_0.25 <- Mydata[,c(-3,-4,-5)]
# Mydata_0.50 que irá conter todos os valores referentes ao segundo Trimestre
# dos anos analisados
Mydata_0.50 <- Mydata[,c(-2,-4,-5)]
# Mydata_0.75 que irá conter todos os valores referentes ao terceiro Trimestre
# dos anos analisados
Mydata_0.75 <- Mydata[,c(-2,-3,-5)]
# e por fim Mydata_1.0 que irá conter todos os valores referentes ao quarto
# Trimestre dos anos analisados
Mydata_1.0 <- Mydata[,c(-2,-3,-4)]
# Adicionando a legenda criada (0.25, 0.50, 0,75, 1.0)
for(i in 1:21){
Mydata_0.25[i,1] <- Mydata_0.25[i,1] + 0.25
Mydata_0.50[i,1] <- Mydata_0.50[i,1] + 0.50
Mydata_0.75[i,1] <- Mydata_0.75[i,1] + 0.75
Mydata_1.0[i,1] <- Mydata_1.0[i,1] + 1
}
#Criando um Data frame 84 x 2, preechido com zeros
Mydata_2 <- data.frame(x = rep(as.numeric(0), 84) , y = rep(as.numeric(0), 84))
#Preenchimento da coluna[1] (x), com os nossos anos.
for (i in 1:84){
Mydata_2[i,1] <- 1960 + (0.25*i)
}
#Preenchimento da coluna[2] (y), com os respectivos valores do lucro da ação.
#preencendo os anos que terminam em .25
e = 1
for (a in 0:3){
for (b in 1:21){
d = (b+(21*a))
if(Mydata_2[d,1] == Mydata_0.25[e,1]){
Mydata_2[d,2] <- Mydata_0.25[e,2]
e <- e + 1
}
}
}
#preencendo os anos que terminam em .50
e = 1
for (a in 0:3){
for (b in 1:21){
d = (b+(21*a))
if(Mydata_2[d,1] == Mydata_0.50[e,1]){
Mydata_2[d,2] <- Mydata_0.50[e,2]
e <- e + 1
}
}
}
#preencendo os anos que terminam em .75
e = 1
for (a in 0:3){
for (b in 1:21){
d = (b+(21*a))
if(Mydata_2[d,1] == Mydata_0.75[e,1]){
Mydata_2[d,2] <- Mydata_0.75[e,2]
e <- e + 1
}
}
}
#preencendo os anos que terminam em .0
e = 1
for (a in 0:3){
for (b in 1:21){
d = (b+(21*a))
if(Mydata_2[d,1] == Mydata_1.0[e,1]){
Mydata_2[d,2] <- Mydata_1.0[e,2]
e <- e + 1
}
}
}
#Agora com o Data Frame Mydata_2 completamente preenchido podemos plotar o
#gráfico dessa série temporal
plot(Mydata_2$x,
Mydata_2$y,
type = "o",
xlab = "Tempo",
ylab = "Ganho Quaternal por Ação",
main = "Johnson & Johson")
plot(Mydata_2$x,
Mydata_2$y,
type = "o",
xlab = "Tempo",
ylab = "Ganho trimestral por Ação",
main = "Johnson & Johson")
